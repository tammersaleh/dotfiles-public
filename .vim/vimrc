" vim: foldmethod=marker
set nocompatible

" Plugins {{{
call plug#begin('~/.vim/plugged')
command! PU source $MYVIMRC | PlugUpdate | PlugUpgrade

" Languages & syntax {{{
Plug 'https://github.com/hashicorp/sentinel.vim'
Plug 'https://github.com/wannesm/wmgraphviz.vim'
Plug 'https://github.com/Matt-Deacalion/vim-systemd-syntax'
Plug 'https://github.com/cakebaker/scss-syntax.vim'
Plug 'https://github.com/cespare/vim-toml'
Plug 'https://github.com/digitaltoad/vim-pug' " Jade
Plug 'https://github.com/ekalinin/Dockerfile.vim' 
Plug 'https://github.com/elzr/vim-json'
Plug 'https://github.com/fatih/vim-go'
Plug 'https://github.com/hail2u/vim-css3-syntax'
Plug 'https://github.com/hashivim/vim-terraform'
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/plasticboy/vim-markdown'
Plug 'https://github.com/python-mode/python-mode'
Plug 'https://github.com/vim-ruby/vim-ruby'
Plug 'https://github.com/vim-scripts/jQuery'
Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/yosssi/vim-ace' 
" }}}

" General {{{
Plug 'https://github.com/kana/vim-smartword' " make `w` better.
Plug 'https://github.com/haya14busa/incsearch.vim' " incrementally highlights ALL pattern matches
Plug 'https://github.com/wincent/terminus' " Make terminal vim slightly nicer
Plug 'https://github.com/nathanaelkane/vim-indent-guides' " Nice indent coloring
Plug 'https://github.com/airblade/vim-gitgutter' " Show git signs in gutter
Plug 'https://github.com/ctrlpvim/ctrlp.vim' 
Plug 'https://github.com/farmergreg/vim-lastplace' " Open files at last cursor position
" Plug 'https://github.com/ludovicchabant/vim-gutentags' bad idea in big directories
Plug 'https://github.com/jiangmiao/auto-pairs' " Auto-close parens, etc
Plug 'https://github.com/junegunn/vim-easy-align' " <leader>a=
Plug 'https://github.com/machakann/vim-highlightedyank' " briefly highlights the copied text
Plug 'https://github.com/panozzaj/vim-autocorrect'
Plug 'https://github.com/rizzatti/dash.vim'
Plug 'https://github.com/rizzatti/funcoo.vim' " Required by Grepper
Plug 'https://github.com/rizzatti/greper.vim'
Plug 'https://github.com/sickill/vim-pasta'
Plug 'https://github.com/tomtom/tcomment_vim'
Plug 'https://github.com/tpope/vim-endwise'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive' " :Gblame is amazingballz
Plug 'https://github.com/tpope/vim-git'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/ryanoasis/vim-devicons' " Has to be last
" }}}

" Autocompletion & Linting {{{
" Need to find an alternative to YCM.  Just too heavy.
" Plug 'https://github.com/Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --go-completer --js-completer --java-completer' }
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/w0rp/ale'
" }}}

" Nerdtree {{{
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin'
Plug 'https://github.com/jistr/vim-nerdtree-tabs'
Plug 'https://github.com/scrooloose/nerdtree'
Plug 'https://github.com/tiagofumo/vim-nerdtree-syntax-highlight'
" }}}

" Color theme {{{
Plug 'https://github.com/morhetz/gruvbox'
Plug 'https://github.com/rafi/awesome-vim-colorschemes'
" set tmux status line colors to same as airline.  Will this solve my inactive window issues?
Plug 'https://github.com/edkolev/tmuxline.vim'
" }}}

call plug#end() 

filetype plugin indent on
syntax on

command! PU so $MYVIMRC | PlugClean! | PlugUpdate | PlugUpgrade | so $MYVIMRC
" }}}

" Space leader
let mapleader = " "

" Sets {{{
set fillchars=vert:\│
set listchars=tab:».,nbsp:_,conceal:×
set list
set ttimeoutlen=10
if !has('nvim')
  set viminfo+=n~/.vim/info
endif
set iskeyword+=-      " This makes foo-bar a single "word" - affects "*" and others
set mouse=a           " Allow mouse positioning and scrolling in terminal.
set clipboard=unnamed " Use the system clipboard
set autoread
set backspace=indent,eol,start
set backup            " keep a backup file
set backupdir=~/.vim/backups
set history=1000      " keep 50 lines of command line history
set ruler             " show the cursor position all the time
" set incsearch         " do incremental searching
set expandtab
set shiftwidth=2
set tabstop=2
set helpheight=1000
set spellfile=~/.vim/en.utf-8.add
set nospell " Disable by default
set completeopt=menu,menuone,preview
set wildmode=longest,list:longest
set signcolumn=yes
setlocal numberwidth=3

set virtualedit=block

" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
set nrformats-=octal
set scrolloff=1
set sidescrolloff=5
set formatoptions+=j

" Nicer splitting
set splitbelow
set splitright

set number

set breakindent
set breakindentopt=shift:0
let &showbreak='↳  '

" set conceallevel=2

if has("gui_running")
  " set lines=80
  " set columns=120
  set tabpagemax=100
  set guifont=FiraCode-Retina:h20 " https://nerdfonts.com/

  set guioptions=egmrLt

  macmenu File.Print key=<nop>
  macmenu Tools.List\ Errors key=<nop>
  macmenu File.New\ Tab key=<nop>
  macmenu Window.Minimize key=<nop>
  " Slows to a crawl :(
  " set macligatures
  set macmeta
else
  " https://www.iterm2.com/documentation-escape-codes.html
  let &t_SI = "\<Esc>]1337;CursorShape=1\x7"
  let &t_EI = "\<Esc>]1337;CursorShape=0\x7"
endif
" }}}

" Maps {{{
" Use \d on top of a word to look it up in Dictionary.app
noremap <silent> <Leader>d :!open dict://<cword><CR><CR>
let g:ctrlp_map = '<Leader>f'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_use_caching = 0

" search will center on the line it's found in and expand folds
" Disabled. Not sure how this works with incsearch plugin
" nnoremap n nzzzv
" nnoremap N Nzzzv

" Do not show stupid q: window
map q: :q

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Splits
" Apple-shift-hjkl move split
nnoremap <D-J> <C-W>J
nnoremap <D-K> <C-W>K
nnoremap <D-L> <C-W>L
nnoremap <D-H> <C-W>H
tnoremap <D-J> <C-W>J
tnoremap <D-K> <C-W>K
tnoremap <D-L> <C-W>L
tnoremap <D-H> <C-W>H
" Apple-hjkl navigates to next split
nnoremap <D-j> <C-W><C-J>
nnoremap <D-k> <C-W><C-K>
nnoremap <D-l> <C-W><C-L>
nnoremap <D-h> <C-W><C-H>
tnoremap <D-j> <C-W><C-J>
tnoremap <D-k> <C-W><C-K>
tnoremap <D-l> <C-W><C-L>
tnoremap <D-h> <C-W><C-H>
" Apple-| and Apple-- create splits
nnoremap <D-\> :vsplit<CR>
nnoremap <D--> :split<CR>
nnoremap <D-t> :tabnew<CR>
tnoremap <D-\> <C-w>:vert term<CR>
tnoremap <D--> <C-w>:below term<CR>
tnoremap <D-t> <C-w>:tabnew<CR>
" Can't use C- here, since one of these results in ESC.  BAD NEWS.
nnoremap <D-]> >>_
nnoremap <D-[> <<_
tnoremap <D-}> <C-w>:tabnext<CR>
tnoremap <D-{> <C-w>:tabprev<CR>
inoremap <D-]> <C-T>
inoremap <D-[> <C-D>
vnoremap <D-]> >gv
vnoremap <D-[> <gv

" Term scrolling
function! ExitNormalMode()
  unmap <buffer> <silent> <LeftMouse>
  unmap <buffer> <silent> <ESC>
  call feedkeys("a")
endfunction

function! EnterNormalMode()
    if &buftype == 'terminal' && mode('') == 't'
        call feedkeys("\<c-w>N")
        call feedkeys("\<c-y>")
        map <buffer> <silent> <LeftMouse> :call ExitNormalMode()<CR>
        map <buffer> <silent> <ESC> :call ExitNormalMode()<CR>
    endif
endfunction

tnoremap <silent> <ScrollWheelUp> <c-w>:call EnterNormalMode()<CR>
tnoremap <C-u> <c-w>:call EnterNormalMode()<CR>
tnoremap <C-v> <C-w>"*

map gb <C-^>
vmap # :TComment<CR>
map <C-l> :nohl<CR>
" Fix surround
xmap s <Plug>VSurround
" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

nnoremap vA ggVG

nmap zf 1z=

" EasyAlign
" nnoremap <Leader>l vip:EasyAlign<CR>

" No idea why I need this, honestly.
noremap <nowait> dd dd
" }}}

" Autocommands {{{
au! GUIEnter * set vb t_vb= " https://stackoverflow.com/questions/16047146/disable-bell-in-macvim

" Resize splits when the window is resized
au VimResized * wincmd =

au BufRead,BufNewFile {Gemfile,Vagrantfile,Berksfile} set ft=ruby
au BufRead,BufNewFile .envrc                          set ft=sh
" Open fold under cursor on read/write
au BufWrite,BufEnter  *                               :silent! normal zO
" Auto-read vimrc on write
autocmd! BufWritePost {.vimrc,vimrc} source %
"}}}

" Colors {{{
set termguicolors
set background=dark
let g:PaperColor_Theme_Options = {
  \   'theme.dark': {
  \     'default': {
  \       'allow_italic': 1,
  \       'override' : {
  \         'color00' : ['#FFFFFF', '']
  \       }
  \     }
  \   }
  \ }
" colorscheme PaperColor

let g:gruvbox_contrast_dark = "hard"
colorscheme gruvbox

hi Normal guibg=black guifg=white
hi Comment cterm=italic
hi HighlightedyankRegion cterm=underline gui=underline
hi Pmenu      guifg=#c6c6c6 guibg=Blue
hi PmenuSel   guifg=Yellow  guibg=Blue gui=bold
hi PmenuSbar  guibg=Grey
hi PmenuThumb guibg=White
"}}}

" IndentGuides {{{
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size = 2
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#252525
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#000000

" IndentLine
" let g:indentLine_enabled = 1
" let g:indentLine_char = '⎸'
" let g:indentLine_concealcursor = 'nc'
" }}}

" Misc {{{

" Make required directories when writing a file..
" http://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
" }}}

" Folding {{{
" http://gregsexton.org/2011/03/27/improving-the-text-displayed-in-a-vim-Fold.html
fu! CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let lineCount = line("$")
  let foldPercentage = printf("(%.1f", (foldSize*1.0)/lineCount*100) . "%) "
  let expansionString = repeat(" ", w - strwidth(foldSizeStr.line.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage
endf
set foldtext=CustomFoldText()

set foldmethod=syntax
" }}}

" Plugin Config {{{
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
endif

" https://github.com/machakann/vim-highlightedyank
map y <Plug>(highlightedyank)
let g:highlightedyank_highlight_duration = 500

" Incsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
" map #  <Plug>(incsearch-nohl-#) " I use tcomment
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
let g:incsearch#separate_highlight = 1

" Smartword
" Warning: This overrides w/b/e/ge defaults
nmap cw c<Plug>(smartword-basic-w)
nmap dw d<Plug>(smartword-basic-w)
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)

" Init ALE fixers, so they can be configured in syntax files
let g:ale_fixers = {}

" Terraform
let g:terraform_align=1
let g:terraform_fmt_on_save = 1

" Airline {{{
let g:airline_powerline_fonts = 1 " Can't set in after: https://github.com/vim-airline/vim-airline/issues/1565
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" Airline shows mode for me
set noshowmode
" Current Highlight Group Under Cursor
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction
let g:airline_section_y = '%{SyntaxItem()}'
set laststatus=2
" }}}

" Gitgutter
let g:gitgutter_max_signs = 1000
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_removed            = '_'
let g:gitgutter_sign_removed_first_line = '‾'
let g:gitgutter_sign_modified_removed   = '~_'
"}}}

" Allow running safe commands from the $PWD/.vimrc file.
" https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc
set secure
