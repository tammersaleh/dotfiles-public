set encoding=utf-8
scriptencoding utf-8

source $HOME/.vim/plugins.vim

" command! PU source $MYVIMRC | PlugClean! | PlugUpdate | PlugUpgrade | source $MYVIMRC
" command! -bar PU call s:plugins_update()
"
" function! s:plugins_update() abort
"     source $MYVIMRC 
"     PlugClean!
"     exe 'PlugSnapshot! '.fnameescape($HOME.'/.vim/plug-snapshot.vim')
"     close
"     PlugUpgrade
"     PlugUpdate
"     source $MYVIMRC 
" endfu


" Options {{{
set backupdir=$XDG_DATA_HOME/vim/backups//
set directory=$XDG_DATA_HOME/vim/swap//
set undodir=$XDG_DATA_HOME/vim/undo//
call mkdir(expand(&undodir), 'p')
call mkdir(expand(&directory), 'p')
call mkdir(expand(&backupdir), 'p')

set fillchars=vert:\│
set listchars=tab:».,nbsp:_,conceal:×
set list
set timeoutlen=1000 ttimeoutlen=10 " Fix esc delay
if !has('nvim')
  set viminfo+=n$XDG_DATA_HOME/vim/info
endif
set iskeyword+=-      " This makes foo-bar a single "word" - affects "*" and others
set mouse=a           " Allow mouse positioning and scrolling in terminal.
set ttymouse=sgr      " Mouse can resize splits
set clipboard=unnamed " Use the system clipboard
set backspace=indent,eol,start
set backup            " keep a backup file
set history=1000      " keep 50 lines of command line history
set ruler             " show the cursor position all the time
set incsearch
set hlsearch
set expandtab
set shiftwidth=2
set tabstop=2
set helpheight=1000
" Regenerate the .spl list
silent exec 'mkspell! ~/.vim/en.utf-8.add'
set spellfile=~/.vim/en.utf-8.add

set nospell " Disable by default
set completeopt=menu,menuone,preview
" Hit tab once in : mode, get list.  Hit again to go through list.
set wildmode=longest:full,full
set wildmenu
set signcolumn=yes
set virtualedit=block
set switchbuf="useopen"
setlocal numberwidth=3

" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
set nrformats-=octal
set scrolloff=1
set sidescrolloff=5
set formatoptions+=j

" Nicer splitting
set splitbelow
set splitright

set number

set display=lastline
set nojoinspaces

set breakindent
set breakindentopt=shift:0
let &showbreak='↳  '

" https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
set regexpengine=1

" Make vim save/restore when leaving buffer, etc
set autoread
set autowriteall
set undofile
set nohidden

set viewdir=$XDG_DATA_HOME/vim/view

" disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
" see also http://snk.tuxfamily.org/log/vim-256color-bce.html
set t_ut=

" tmux will send xterm-style keys when its xterm-keys option is on
" https://superuser.com/questions
if &term =~# '^tmux'
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes 
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
" }}}
" Maps {{{
" Space leader
let mapleader = ' '

" Do not show stupid q: window
nnoremap q: :q

" ; instead of :
nnoremap ; :
tnoremap <silent> <C-W>; <C-W>:

" Allow saving of files as sudo when I forgot to start vim using sudo.
" cmap w!! w !sudo tee > /dev/null %
" Causes :w to wait before printing w

xnoremap gs y:%s/<C-r>"//g<Left><Left>

if has('gui_macvim')
  set macmeta
endif

" Splits
" Ctrl-n/ creates splits
" Ctrl-hjkl changes splits
function! s:dirvish_at_cwd() abort
  exec 'Dirvish ' . getcwd()
endfunction

 noremap <silent> <C-Right>      :vsplit +call\ <sid>dirvish_at_cwd()<CR>
tnoremap <silent> <C-Right> <C-w>:vsplit +call\ <sid>dirvish_at_cwd()<CR>
 noremap <silent> <C-Down>       :split  +call\ <sid>dirvish_at_cwd()<CR>
tnoremap <silent> <C-Down>  <C-w>:split  +call\ <sid>dirvish_at_cwd()<CR>
 noremap <silent> <C-h> <C-W><C-H>
tnoremap <silent> <C-h> <C-W><C-H>
 noremap <silent> <C-j> <C-W><C-J>
tnoremap <silent> <C-j> <C-W><C-J>
 noremap <silent> <C-k> <C-W><C-K>
tnoremap <silent> <C-k> <C-W><C-K>
 noremap <silent> <C-l> <C-W><C-L>
tnoremap <silent> <C-l> <C-W><C-L>

" Space-t spawns a terminal
nnoremap <silent> <Leader>t :bp\|bd #\|terminal ++curwin<CR>

" Indent/deindent
nnoremap <silent> <Tab> >>_
nnoremap <silent> <S-Tab> <<_
inoremap <silent> <S-Tab> <C-D>
vnoremap <silent> <Tab> >gv
vnoremap <silent> <S-Tab> <gv

" Term scrolling
function! TSExitNormalMode()
  unmap <buffer> <silent> <LeftMouse>
  unmap <buffer> <silent> <ESC>
  call feedkeys('a')
endfunction

function! TSEnterNormalMode()
  if &buftype ==? 'terminal' && mode('') ==? 't'
    call feedkeys("\<c-w>N")
    call feedkeys("\<c-y>")
    map <buffer> <silent> <LeftMouse> :call TSExitNormalMode()<CR>
    map <buffer> <silent> <ESC> :call TSExitNormalMode()<CR>
    setlocal nonumber
  endif
endfunction

tnoremap <silent> <ScrollWheelUp> <c-w>:call TSEnterNormalMode()<CR>
tnoremap <silent> <C-u> <c-w>:call TSEnterNormalMode()<CR>
tnoremap <C-v> <C-w>"*

" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap <silent> k gk
nnoremap <silent> j gj
nnoremap <silent> gk k
nnoremap <silent> gj j

" Spelling
nnoremap zf 1z=
nnoremap zb zw

" write and quit on ctrl-D
" This conflicts with normal pagedown behavior
" nnoremap <C-d> :wq<CR>

""" Text objects
" https://vimways.org/2018/transactions-pending/
" 'in line' (entire line sans white-space; cursor at beginning--ie, ^)
xnoremap <silent> il :<c-u>normal! g_v^<cr>
onoremap <silent> il :<c-u>normal! g_v^<cr>

" 'around line' (entire line sans trailing newline; cursor at beginning--ie, 0)
xnoremap <silent> al :<c-u>normal! $v0<cr>
onoremap <silent> al :<c-u>normal! $v0<cr>

" 'in document' (from first line to last; cursor at top--ie, gg)
xnoremap <silent> id :<c-u>normal! G$Vgg0<cr>
onoremap <silent> id :<c-u>normal! GVgg<cr>

" 'in fold' https://github.com/Konfekt/FastFold#fold-text-object
xnoremap <silent> iz :<c-u>normal! ]zv[z<cr>
xnoremap <silent> az :<c-u>normal! ]zV[z<cr>

" 'in indentation' (indentation level sans any surrounding empty lines)
function! s:inIndentation()
  let l:magic = &magic
  set magic
  normal! ^
  let l:vCol = virtcol(getline('.') =~# '^\s*$' ? '$' : '.')
  let l:pat = '^\(\s*\%'.l:vCol.'v\|^$\)\@!'
  let l:start = search(l:pat, 'bWn') + 1
  let l:end = search(l:pat, 'Wn')
  if (l:end !=# 0)
    let l:end -= 1
  endif
  execute 'normal! '.l:start.'G0'
  call search('^[^\n\r]', 'Wc')
  execute 'normal! Vo'.l:end.'G'
  call search('^[^\n\r]', 'bWc')
  normal! $o
  let &magic = l:magic
endfunction
xnoremap <silent> ii :<c-u>call <sid>inIndentation()<cr>
onoremap <silent> ii :<c-u>call <sid>inIndentation()<cr>

" "around indentation" (indentation level and any surrounding empty lines)
function! s:aroundIndentation()
  let l:magic = &magic
  set magic
  normal! ^
  let l:vCol = virtcol(getline('.') =~# '^\s*$' ? '$' : '.')
  let l:pat = '^\(\s*\%'.l:vCol.'v\|^$\)\@!'
  let l:start = search(l:pat, 'bWn') + 1
  let l:end = search(l:pat, 'Wn')
  if (l:end !=# 0)
    let l:end -= 1
  endif
  execute 'normal! '.l:start.'G0V'.l:end.'G$o'
  let &magic = l:magic
endfunction
xnoremap <silent> ai :<c-u>call <sid>aroundIndentation()<cr>
onoremap <silent> ai :<c-u>call <sid>aroundIndentation()<cr>

" show current highlight
noremap gs :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

function! OSC52Copy(text) abort
  let escape = system('osc-52-copy', a:text)
  if v:shell_error
    echoerr escape
  else
    call writefile([escape], '/dev/tty', 'b')
  endif
endfunction
" copy to system clipboard over ssh
xnoremap <silent> <Leader>y y:call OSC52Copy(getreg('"'))<CR>

" https://vi.stackexchange.com/questions/5658/fold-unfold-on-moving-vertically
function! MoveAndFoldLeft()
    let line = getpos('.')[1]
    let col  = getpos('.')[2]

    if l:col ==# 1 && foldlevel(l:line)
        execute "foldclose"
    else
        execute "normal! h"
    endif
endfunction

function! MoveAndFoldRight()
    let line = getpos('.')[1]

    if foldlevel(line) && foldclosed(line) != -1
        execute "foldopen"
    else
        execute "normal! l"
    endif
endfunction

nnoremap <silent> <Left>  :call MoveAndFoldLeft()<cr>
nnoremap <silent> h       :call MoveAndFoldLeft()<cr>
nnoremap <silent> <Right> :call MoveAndFoldRight()<cr>
nnoremap <silent> l       :call MoveAndFoldRight()<cr>

" }}}
" Autocommands {{{
" Make required directories when writing a file..
" http://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! TSMkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup vimrc
  autocmd!
  " Open quickfix window after any :*grep* command
  " https://github.com/tpope/vim-fugitive
  autocmd QuickFixCmdPost *grep* cwindow
  " https://stackoverflow.com/questions/16047146/disable-bell-in-macvim
  autocmd GUIEnter * set vb t_vb=                     
  " Resize splits when the window is resized
  autocmd VimResized * wincmd =                       
  " Auto-read vimrc on write
  autocmd BufWritePost {.vimrc,vimrc} nested source % 

  autocmd BufWritePre * :call TSMkNonExDir(expand('<afile>'), +expand('<abuf>'))

  " Only highlight searches while searching
  autocmd CmdlineEnter /,\? :set hlsearch   
  autocmd CmdlineLeave /,\? :set nohlsearch

  " Sync syntax highlighting when entering a buffer
  autocmd BufEnter * :syntax sync fromstart
  " Fixed QF / Location window size
  autocmd FileType qf setlocal winfixwidth
  " https://github.com/justinmk/vim-dirvish/issues/142
  autocmd FileType qf noremap <buffer> <C-Right> :lclose \| vsplit +call\ <sid>dirvish_at_cwd()<CR>
  autocmd FileType qf noremap <buffer> <C-Down> :lclose \| split +call\ <sid>dirvish_at_cwd()<CR>
augroup END
"}}}
" Colors {{{
function! MyHighlights() abort
  highlight Normal                      guibg=black
  highlight Comment                                    cterm=italic
  highlight Pmenu       guifg=#c6c6c6   guibg=Blue
  highlight PmenuSel    guifg=Yellow    guibg=Blue     cterm=bold
  highlight PmenuSbar                   guibg=Grey
  highlight PmenuThumb                  guibg=White
  highlight MatchParen  guifg=NONE      guibg=NONE     cterm=underline,bold ctermbg=NONE
  highlight Folded      guifg=lightblue guibg=NONE     cterm=bold   
  highlight Cursor      guifg=yellow    guibg=blue     " Only works in GUI.  See kitty.conf for terminal
  highlight WildMenu    guifg=yellow
  " highlight ColorColumn guifg=yellow    guibg=#444444
  highlight slideDelim  guifg=#555555
  highlight kramdownIAL guifg=Grey                     cterm=italic
  highlight htmlH1      guifg=#b8bb26                  cterm=bold
  highlight htmlH2      guifg=#a5a822                  cterm=bold
  highlight htmlH3      guifg=#93951e                  cterm=bold
  highlight htmlH4      guifg=#80821a                  cterm=bold
  highlight htmlH5      guifg=#6e7016                  cterm=bold
  highlight htmlH6      guifg=#5c5d13                  cterm=bold
  highlight String      guifg=#999999
  highlight Visual      guifg=#c4c400   guibg=black
  " call matchadd('ColorColumn', '\%81v', 100)
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END

" https://medium.com/@dubistkomisch/how-to-actually-get-italics-and-true-colour-to-work-in-iterm-tmux-vim-9ebe55ebc2be
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

" https://vi.stackexchange.com/questions/15722/vim-tmux-and-xterm-bracketed-paste
if &term =~ '^tmux'
  let &t_BE="\<Esc>[?2004h"
  let &t_BD="\<Esc>[?2004l"
  let &t_PS="\<Esc>[200~"
  let &t_PE="\<Esc>[201~"
endif

set termguicolors
set background=dark
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox
"}}}
packadd! matchit " % now works with if/else/fi
" Folding {{{
" set foldopen=all " Too aggressive.  Can't move through file.
set foldopen&
set foldopen+=insert
set foldopen+=jump
" Toggle folds under cursor recursively
nnoremap zz zA

" http://gregsexton.org/2011/03/27/improving-the-text-displayed-in-a-vim-Fold.html
fu! CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~? '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = ' ' . foldSize . ' lines '
  let lineCount = line('$')
  let foldPercentage = printf('(%.1f', (foldSize*1.0)/lineCount*100) . '%) '
  let expansionString = repeat('─', w - strwidth(foldSizeStr.line.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage
endf
set foldtext=CustomFoldText()
" }}}
" Plugin Config {{{

let g:Illuminate_highlightUnderCursor = 0

" vim-dirvish {{{
let g:dirvish_mode = ':sort ,^.*[\/],'
augroup my_dirvish
  autocmd!
  autocmd FileType dirvish silent keeppatterns g@\v/\.[^\/]+/?$@d _
  autocmd FileType dirvish nnoremap <buffer> <silent> <Leader>t :exec 'lcd ' . expand('%')<CR>:terminal ++curwin<CR>
  autocmd FileType dirvish nnoremap <buffer> <silent> t :exec 'lcd ' . expand('%')<CR>:terminal ++curwin<CR>
augroup END
" }}}

" vim-markdown {{{
let g:vim_markdown_override_foldtext = 0
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_yaml_frontmatter = 1
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_new_list_item_indent = 0
let g:vim_markdown_fenced_languages = ['bash=sh', 'console=sh']
let g:vim_markdown_folding_disabled = 1 " We manage our own folding
" }}}

" vim-qf {{{
let g:qf_auto_resize = 0
let g:qf_loclist_window_bottom = 0
" }}}

" https://github.com/romainl/vim-devdocs
set keywordprg=:DD

" https://github.com/zhimsel/vim-stay
set viewoptions=cursor,folds,slash,unix

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" }}}
" COC {{{
set cmdheight=2
set updatetime=300
set shortmess+=c
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" This maintains the tag list, enabling `gb` when jumping to a definition.
function! s:coc_definition_with_tag_list() abort
  " Cribbed from :h tagstack-examples
  let tag = expand('<cword>')
  let pos = [bufnr()] + getcurpos()[1:]
  let item = {'bufnr': pos[0], 'from': pos, 'tagname': tag}
  if CocAction('jumpDefinition')
    " Jump was successful, write previous location to tag stack.
    let winid = win_getid()
    let stack = gettagstack(winid)
    let stack['items'] = [item]
    call settagstack(winid, stack, 't')
  endif
endfunction

" GoTo code navigation.
nmap <silent> gd :call <SID>coc_definition_with_tag_list()<CR>
nmap <silent> gr <Plug>(coc-references)
map <silent> gb <C-t>


" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
" }}}

" localvimrc {{{
let g:localvimrc_persistent = 2
let g:localvimrc_persistence_file = $XDG_DATA_HOME . '/vim/localvimrc_persistent'
" }}}

" Surround {{{
xmap s <Plug>VSurround
let g:surround_{char2nr("(")} = "(\r)"
let g:surround_{char2nr("[")} = "[\r]"
let g:surround_{char2nr("<")} = "<\r>"
let g:surround_{char2nr("%")} = "%{\r}"
let g:surround_{char2nr("#")} = "#{\r}"
let g:surround_{char2nr("$")} = "$(\r)"
" }}}

" EasyAlign {{{
" Start interactive EasyAlign in visual mode (e.g. vip<leader>a)
xmap <Leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip<leader>a)
nmap <Leader>a <Plug>(EasyAlign)
" }}}

" SuperTab {{{
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabCrMapping             = 0
" }}}

" TComment {{{
vmap # :TComment<CR>
" }}}

" ctrlp {{{
let g:ctrlp_map = '<Leader>f'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_use_caching = 0 " ag is fast.
let g:ctrlp_open_new_file = 'e'
let g:ctrlp_open_multiple_files = 'e'
let g:ctrlp_working_path_mode = 'a'
if executable('ag')
  let g:ctrlp_user_command = 'gtimeout 2s ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif
" }}}

" Smartword {{{
" Warning: This overrides w/b/e/ge defaults
nmap cw c<Plug>(smartword-basic-w)
nmap dw d<Plug>(smartword-basic-w)
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)
" }}}

" vimade {{{
let g:vimade = {}
let g:vimade.enablesigns = 1
" https://github.com/TaDaa/vimade/issues/19
let g:vimade.usecursorhold=1
" }}}

" Terraform {{{
" let g:terraform_align=1
" let g:terraform_fmt_on_save = 1
" }}}

" Gitgutter {{{
let g:gitgutter_max_signs = 1000
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_removed            = '_'
let g:gitgutter_sign_removed_first_line = '‾'
let g:gitgutter_sign_modified_removed   = '~_'
" }}}

" Status Line {{{
function! TSprojname() abort
  return fnamemodify(projectroot#get(), ':t')
endfunction

" https://github.com/neoclide/coc.nvim/wiki/Statusline-integration
function! TSCocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

set noshowmode
set laststatus=2
let g:lightline = {
\   'active': {
\     'left':  [ [ 'mode', 'paste' ],
\                [ 'gitbranch', 'projectroot', 'relativepath'], 
\                [ 'cocstatus', 'currentfunction', 'readonly', 'modified' ] ],
\     'right': [ [ 'lineinfo' ],
\                [ 'percent' ],
\                [ 'filetype'] ]
\   },
\   'inactive': {
\     'left':  [ [ 'relativepath' ] ],
\     'right': [ [ 'lineinfo' ],
\                [ 'percent' ] ]
\   },
\   'component_function': {
\     'gitbranch': 'gitbranch#name',
\     'projectroot': 'TSprojname',
\     'cocstatus': 'coc#status',
\     'currentfunction': 'CocCurrentFunction'
\   },
\   'mode_map': {
\     'n': 'N', 'i': 'I', 'R': 'R', 'v': 'V', 'V': 'VL', "\<C-v>": 'VB',
\     'c': 'C', 's': 'S', 'S': 'SL', "\<C-s>": 'SB', 't': 'T'
\   },
\   'separator': { 'left': '', 'right': '' },
\   'subseparator': { 'left': '', 'right': '' },
\   'colorscheme': 'PaperColor',
\ }
" }}}

" URL Opener {{{
" This isn't working.  #abc123
function! TScolor_code(word)
  if a:word =~? '^#[abcd0-9]\{6\}$'
    return 'https://www.color-hex.com/color/' . a:word[1:]
  endif
endfunction
let g:url_transformers = [ 'TScolor_code' ]
" }}}
"}}}

" vim: foldmethod=marker
