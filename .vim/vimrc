" Plugins {{{
call plug#begin('~/.vim/plugged')

if has('python3')
  " Force python3 support before loading other plugins
  " https://robertbasic.com/blog/force-python-version-in-vim/
  "
  " Then, silently load python3 to get around imp deprecation warning:
  " https://github.com/vim/vim/issues/3117
  silent! python3 1
endif

" Languages & syntax {{{
Plug 'https://github.com/hashicorp/sentinel.vim'
Plug 'https://github.com/wannesm/wmgraphviz.vim'
Plug 'https://github.com/Matt-Deacalion/vim-systemd-syntax'
Plug 'https://github.com/cakebaker/scss-syntax.vim'
Plug 'https://github.com/cespare/vim-toml'
Plug 'https://github.com/digitaltoad/vim-pug'   " Jade
Plug 'https://github.com/ekalinin/Dockerfile.vim'
Plug 'https://github.com/elzr/vim-json'
Plug 'https://github.com/fatih/vim-go'
Plug 'https://github.com/hail2u/vim-css3-syntax'
Plug 'https://github.com/hashivim/vim-terraform'
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/plasticboy/vim-markdown'
Plug 'https://github.com/python-mode/python-mode', { 'branch': 'develop' }
Plug 'https://github.com/vim-ruby/vim-ruby'
Plug 'https://github.com/vim-scripts/jQuery'
Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/yosssi/vim-ace'
Plug 'https://github.com/chrisbra/csv.vim'
Plug 'https://github.com/tmhedberg/SimpylFold'  " Better python folding
Plug 'https://github.com/szymonmaszke/vimpyter' " edit jupyter notebooks.  cray.
" }}}

" General {{{
Plug 'https://github.com/tpope/vim-vinegar'             " better netrw
Plug 'https://github.com/kana/vim-smartword'            " make `w` better.
Plug 'https://github.com/airblade/vim-gitgutter'        " Show git signs in gutter
Plug 'https://github.com/ctrlpvim/ctrlp.vim'
Plug 'https://github.com/jiangmiao/auto-pairs'          " Auto-close parens, etc

Plug 'https://github.com/junegunn/vim-easy-align'       " <leader>a=
Plug 'https://github.com/machakann/vim-highlightedyank' " briefly highlights the copied text
Plug 'https://github.com/panozzaj/vim-autocorrect'
Plug 'https://github.com/rizzatti/dash.vim'
Plug 'https://github.com/rizzatti/funcoo.vim'           " Required by Grepper
Plug 'https://github.com/sickill/vim-pasta'
Plug 'https://github.com/tomtom/tcomment_vim'
Plug 'https://github.com/tpope/vim-endwise'
Plug 'https://github.com/tpope/vim-eunuch'
Plug 'https://github.com/tpope/vim-fugitive'            " :Gblame is amazingballz
Plug 'https://github.com/tpope/vim-rhubarb'             " github for fugative
Plug 'https://github.com/tpope/vim-git'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
Plug 'https://github.com/zhimsel/vim-stay'              " Keep cursor pos, etc between sessions
Plug 'https://github.com/blueyed/vim-diminactive'
Plug 'https://github.com/embear/vim-localvimrc'         " Open .lvimrc files securely
Plug 'https://github.com/romainl/vim-devdocs'           " Add :DD for devdocs.io
" }}}

" Autocompletion & Linting {{{
Plug 'https://github.com/ervandew/supertab'
Plug 'https://github.com/w0rp/ale'
" }}}

" Color theme {{{
Plug 'https://github.com/morhetz/gruvbox'
Plug 'https://github.com/rafi/awesome-vim-colorschemes'
" set tmux status line colors to same as airline.  Will this solve my inactive window issues?
Plug 'https://github.com/edkolev/tmuxline.vim'
" }}}

call plug#end()

filetype plugin indent on
syntax on

command! PU source $MYVIMRC | PlugClean! | PlugUpdate | PlugUpgrade | source $MYVIMRC
" }}}

" Sets {{{
set titlestring=%{substitute(getcwd(),\ $HOME,\ '~',\ '')}
set fillchars=vert:\│
set listchars=tab:».,nbsp:_,conceal:×
set list
set timeoutlen=1000 ttimeoutlen=10 " Fix esc delay
if !has('nvim')
  set viminfo+=n~/.vim/info
endif
set iskeyword+=-      " This makes foo-bar a single "word" - affects "*" and others
set mouse=a           " Allow mouse positioning and scrolling in terminal.
set clipboard=unnamed " Use the system clipboard
set autoread
set backspace=indent,eol,start
set backup            " keep a backup file
set backupdir=~/.vim/backups
set history=1000      " keep 50 lines of command line history
set ruler             " show the cursor position all the time
set incsearch
set hlsearch
set expandtab
set shiftwidth=2
set tabstop=2
set helpheight=1000
set spellfile=~/.vim/en.utf-8.add
set nospell " Disable by default
set completeopt=menu,menuone,preview
set wildmenu
set signcolumn=yes
set virtualedit=block
setlocal numberwidth=3

" https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim
set nrformats-=octal
set scrolloff=1
set sidescrolloff=5
set formatoptions+=j

" Nicer splitting
set splitbelow
set splitright

set number

set breakindent
set breakindentopt=shift:0
let &showbreak='↳  '

if has("gui_running")
  set tabpagemax=100
  set guifont=FiraCode-Retina:h20 " https://nerdfonts.com/

  set guioptions=egm

  macmenu File.Print key=<nop>
  macmenu Tools.List\ Errors key=<nop>
  macmenu File.New\ Tab key=<nop>
  macmenu Window.Minimize key=<nop>
  " set macligatures Slows to a crawl :(
else
  " https://www.iterm2.com/documentation-escape-codes.html
  let &t_SI = "\<Esc>]1337;CursorShape=1\x7"
  let &t_EI = "\<Esc>]1337;CursorShape=0\x7"
  if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
  endif
endif
" }}}

" Maps {{{
" Do not show stupid q: window
nnoremap q: :q

" ; instead of :
nnoremap ; :

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

xnoremap gs y:%s/<C-r>"//g<Left><Left>

if has("gui_macvim")
  set macmeta
endif

" }}
" Splits
" Ctrl-n/ creates splits
" Ctrl-hjkl changes splits
 noremap <C-Right> :vnew +Explore<CR>
tnoremap <C-Right> <C-w>:vnew +Explore<CR>
 noremap <C-Down> :new +Explore<CR>
tnoremap <C-Down> <C-w>:new +Explore<CR>
 noremap <C-h> <C-W><C-H>
tnoremap <C-h> <C-W><C-H>
 noremap <C-j> <C-W><C-J>
tnoremap <C-j> <C-W><C-J>
 noremap <C-k> <C-W><C-K>
tnoremap <C-k> <C-W><C-K>
 noremap <C-l> <C-W><C-L>
tnoremap <C-l> <C-W><C-L>

" Space-t spawns a terminal
nnoremap <Leader>t :terminal ++curwin<CR>

" Indent/deindent
nnoremap <Leader>] >>_
nnoremap <Leader>[ <<_

" Fix for netrw.
augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
  noremap  <buffer> <C-Right> :vnew +Explore<CR>
  noremap  <buffer> <C-Down> :new +Explore<CR>
  nnoremap <buffer> <silent> t :exec 'lcd ' . b:netrw_curdir<CR>:terminal ++curwin<CR>
endfunction

" Term scrolling
function! TSExitNormalMode()
  unmap <buffer> <silent> <LeftMouse>
  unmap <buffer> <silent> <ESC>
  call feedkeys("a")
endfunction

function! TSEnterNormalMode()
  if &buftype == 'terminal' && mode('') == 't'
    call feedkeys("\<c-w>N")
    call feedkeys("\<c-y>")
    map <buffer> <silent> <LeftMouse> :call TSExitNormalMode()<CR>
    map <buffer> <silent> <ESC> :call TSExitNormalMode()<CR>
    setlocal nonumber
  endif
endfunction

tnoremap <silent> <ScrollWheelUp> <c-w>:call TSEnterNormalMode()<CR>
tnoremap <silent> <C-u> <c-w>:call TSEnterNormalMode()<CR>
tnoremap <C-v> <C-w>"*

map gb <C-^>

" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

nnoremap vA ggVG

" quick fix for misspelled word
nnoremap zf 1z=

" No idea why I need this, honestly.
noremap <nowait> dd dd
" }}}

" Autocommands {{{
au! GUIEnter * set vb t_vb= " https://stackoverflow.com/questions/16047146/disable-bell-in-macvim

" Resize splits when the window is resized
au VimResized * wincmd =

" Open fold under cursor on read/write
au BufWrite,BufEnter  * :silent! normal zO

" Auto-read vimrc on write
autocmd! BufWritePost {.vimrc,vimrc} nested source %

" Only highlight searches while searching
augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

" Make required directories when writing a file..
" http://stackoverflow.com/questions/4292733/vim-creating-parent-directories-on-save
function! TSMkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup TSCreateDir
  autocmd!
  autocmd BufWritePre * :call TSMkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
"}}}

" Colors {{{

set termguicolors
set background=dark

let g:gruvbox_contrast_dark = "hard"
function! MyHighlights() abort
  highlight Normal                      guibg=black
  highlight Comment                                               cterm=italic
  highlight Pmenu       guifg=#c6c6c6   guibg=Blue
  highlight PmenuSel    guifg=Yellow    guibg=Blue  gui=bold
  highlight PmenuSbar                   guibg=Grey
  highlight PmenuThumb                  guibg=White
  highlight MatchParen  guifg=NONE      guibg=NONE  gui=underline cterm=underline
  highlight Folded      guifg=lightblue guibg=NONE  gui=bold   
  highlight ColorColumn                                           ctermbg=magenta
  highlight Cursor      guifg=yellow    guibg=blue  " Only works in GUI.  See kitty.conf for terminal
  call matchadd('ColorColumn', '\%81v', 100)
endfunction

augroup MyColors
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END
colorscheme gruvbox

"}}}

" Lets {{{
" Space leader
let mapleader = " "

" cargo-culted from https://medium.com/@dubistkomisch/how-to-actually-get-italics-and-true-colour-to-work-in-iterm-tmux-vim-9ebe55ebc2be
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes 
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"
" }}}

packadd! matchit " % now works with if/else/fi

" Folding {{{
" set foldopen=all " Too aggressive.  Can't move through file.
" Toggle folds under cursor recursively
nnoremap zz zA

" http://gregsexton.org/2011/03/27/improving-the-text-displayed-in-a-vim-Fold.html
fu! CustomFoldText()
  "get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
  endwhile
  if fs > v:foldend
    let line = getline(v:foldstart)
  else
    let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
  let foldSize = 1 + v:foldend - v:foldstart
  let foldSizeStr = " " . foldSize . " lines "
  let lineCount = line("$")
  let foldPercentage = printf("(%.1f", (foldSize*1.0)/lineCount*100) . "%) "
  let expansionString = repeat("·", w - strwidth(foldSizeStr.line.foldPercentage))
  return line . expansionString . foldSizeStr . foldPercentage
endf
set foldtext=CustomFoldText()
" }}}

" Plugin Config {{{

" https://github.com/romainl/vim-devdocs
set keywordprg=:DD

" https://github.com/zhimsel/vim-stay
set viewoptions=cursor,folds,slash,unix

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  set grepprg=ag\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" localvimrc {{{
let g:localvimrc_persistent = 2
let g:localvimrc_persistence_file = expand('$HOME') . "/.vim/localvimrc_persistent"
" }}}

" Surround {{{
xmap s <Plug>VSurround
let g:surround_40 = "(\r)"
let g:surround_40 = "(\r)"
let g:surround_91 = "[\r]"
let g:surround_60 = "<\r>"
" }}}

" ALE {{{
let g:ale_echo_msg_error_str = '🔥'
let g:ale_echo_msg_warning_str = '🤔'
let g:ale_echo_msg_info_str = '👋'
let g:ale_echo_msg_format = '%severity% %s [%code %%linter%]'
let g:ale_open_list = 0
let g:ale_loclist = 0
let g:ale_sign_error = '🔥'
let g:ale_sign_warning = '🤔'
let g:ale_sign_info = '👋'
let g:ale_sign_column_always = 1
set signcolumn="yes"
" let g:ale_fixers = {} " Each fixer is set explicitly
highlight clear ALEErrorSign
highlight clear ALEWarningSign
highlight clear ALEInfoSign
augroup LanguageClient_config
  autocmd!
  autocmd User LanguageClientStarted setlocal signcolumn=yes
  autocmd User LanguageClientStopped setlocal signcolumn=yes
augroup END
" }}}

" EasyAlign {{{
" Start interactive EasyAlign in visual mode (e.g. vip<leader>a)
xmap <Leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip<leader>a)
nmap <Leader>a <Plug>(EasyAlign)
" }}}

" SuperTab {{{
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
" }}}

" TComment {{{
vmap # :TComment<CR>
" }}}

" ctrlp {{{
let g:ctrlp_map = '<Leader>f'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_use_caching = 0 " ag is fast.
let g:ctrlp_open_new_file = 'e'
let g:ctrlp_open_multiple_files = 'e'
let g:ctrlp_working_path_mode = 'a'
if executable('ag')
  let g:ctrlp_user_command = 'gtimeout 2s ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif
" }}}

" Smartword {{{
" Warning: This overrides w/b/e/ge defaults
nmap cw c<Plug>(smartword-basic-w)
nmap dw d<Plug>(smartword-basic-w)
map w  <Plug>(smartword-w)
map b  <Plug>(smartword-b)
map e  <Plug>(smartword-e)
map ge <Plug>(smartword-ge)
" }}}

" Terraform {{{
let g:terraform_align=1
let g:terraform_fmt_on_save = 1
" }}}

" vim-diminactive {{{
let g:diminactive_use_colorcolumn = 0
let g:diminactive_use_syntax = 1
let g:diminactive_enable_focus = 1
" }}}

" Airline {{{
let g:airline_theme='light'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#vcs_priority = ["git"]
let g:airline#extensions#branch#format = 2
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#hunks#enabled = 0
let g:airline_highlighting_cache = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''

let g:airline_section_c = '%f'
let g:airline_section_z = '%p%%'
let g:airline#extensions#ale#enabled = 0
let g:airline#extensions#ycm#enabled = 0
" let g:airline_section_c = '%-0.20{getcwd()}'
let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  let s:in = [ 'black' , '#512E5F' , 248 , 255 , '' ]
  let a:palette.inactive = airline#themes#generate_color_map(s:in, s:in, s:in)
endfunction

" let s:IA1 = [ '#666666' , '#b2b2b2' , 242 , 249 , '' ]
" let s:IA2 = [ '#8a8a8a' , '#d0d0d0' , 245 , 252 , '' ]
" let s:IA3 = [ 'black'   , '#512E5F' , 248 , 255 , '' ]
" let g:airline#themes#light#palette.inactive = airline#themes#generate_color_map(s:IA1, s:IA2, s:IA3)
" let g:airline#themes#light#palette.inactive_modified = { 'airline_c': [ '#df0000' , ''        , 160     , ''      , ''     ] , }
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ 't'  : 'T',
      \ }

" Airline shows mode for me
set noshowmode
set laststatus=2
" }}}

" Gitgutter {{{
let g:gitgutter_max_signs = 1000
let g:gitgutter_highlight_lines = 0
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_removed            = '_'
let g:gitgutter_sign_removed_first_line = '‾'
let g:gitgutter_sign_modified_removed   = '~_'
" }}}
"}}}

" vim: foldmethod=marker
